#!/usr/bin/env bash_unit

### vm_disk_create

test_vm_disk_create_creates_disk() {
  local diskName=$(vm_disk_create ${test_vm} ${test_context} ${test_type} 1)
  local diskDir=$(vm_dir ${test_vm} ${test_context} ${test_type})
  assert "[ -f ${diskDir}/${diskName} ]" "disk was not created"
}

test_vm_disk_create_creates_qcow_disk() {
  local diskName=$(vm_disk_create ${test_vm} ${test_context} ${test_type} 1)
  local diskDir=$(vm_dir ${test_vm} ${test_context} ${test_type})
  assert "file ${diskDir}/${diskName} | grep 'QEMU QCOW Image'" "created file is not qcow"
}

test_vm_disk_create_does_not_duplicate_names() {
  local diskName1=$(vm_disk_create ${test_vm} ${test_context} ${test_type} 1)
  local diskName2=$(vm_disk_create ${test_vm} ${test_context} ${test_type} 1)
  assert_not_equals "${diskName1}" "${diskName2}" "2 vm_disk_create calls return same file"
}

### vm_stop

test_vm_stop_actually_stops_process() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  assert "vm_running ${test_context} ${test_type} | grep \"^${vmName} \"" "vm has not been created"
  vm_stop ${vmName} ${test_context} ${test_type}
  wait_for_vm_to_stop ${vmName}
  assert_fail "vm_running ${test_context} ${test_type} | grep \"^${vmName} \"" "vm has not been stopped"
}

### vm_run

test_vm_run_launches_a_vm() {
  local diskName=$(vm_disk_create ${test_vm} ${test_context} ${test_type} 1)
  local confFile=$(vm_conf_file ${test_vm} ${test_context} ${test_type})
  cat > ${confFile} << EOF
vmName=${test_vm}
vmMem=256
vmCpu=1
vmDisk=${diskName}
EOF
  vm_run ${test_vm} ${test_context} ${test_type} >&2
  assert "vm_running ${test_context} ${test_type} | grep \"^${test_vm} \"" "vm has not been created"
}

### vm_mac_gen

test_vm_mac_gen_generates_mac_address() {
  assert_equals "5" "$(vm_mac_gen | sed -r 's/[^:]//;s/(.)/\1\n/g' | grep -c :)" "generated strings is no mac address"
  assert_equals "1" "$(vm_mac_gen | sed -r '/^00:50:56/!d' | wc -l)" "generated strings is no vm mac address"
}

### vm_get_mac

test_vm_get_mac_gets_real_mac() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  local vmRealMac=$(vm_ssh ${vmName} ip a show | sed -r '/link\/ether/!d;s/.*link\/ether ([^ ]*) brd.*/\1/' | sort | uniq)
  local vmGetMac=$(vm_get_mac ${vmName})
  assert "grep ${vmGetMac} <(echo -e ${vmRealMac})" "mac address does not appear on machine"
}

### vm_create

test_vm_create_actually_creates_a_machine() {
  vm_create ${test_vm} ${test_context} ${test_type} "" no
  assert "vm_running ${test_context} ${test_type} | grep \"^${test_vm} \"" "vm has not been created"
}

### vm_clone_disk

test_vm_clone_disk_generates_a_qcow_disk_based_one_another() {
  local diskSize=1
  local diskDir=$(vm_dir ${test_vm} ${test_context} ${test_type})
  local diskName=$(vm_disk_create ${test_vm} ${test_context} ${test_type} ${diskSize})
  local confFile=$(vm_conf_file ${test_vm} ${test_context} ${test_type})
  cat > ${confFile} << EOF
vmName=${test_vm}
vmMem=256
vmCpu=1
vmDisk=${diskName}
EOF
  local cloneName=${test_vm}_clone
  local cloneDir=$(vm_dir ${cloneName} ${test_context} ${test_type})
  local cloneDisk=$(vm_clone_disk ${test_context} ${test_type} ${test_vm} ${test_context} ${test_type} ${cloneName})
  local expectedFile="${cloneDir}/${cloneDisk}: QEMU QCOW Image (v3), has backing file (path $(echo ${diskDir}/${diskName} | sed -r 's/^(.{95}).*/\1/')),"
  assert "file ${cloneDir}/${cloneDisk} | grep \"${expectedFile}\"" "clone is not based on initial disk"
  chmod +w ${diskDir}/${diskName}
}

### vm_running

test_vm_running_retrives_launched_vm() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  assert_equals "1" "$(vm_running ${test_context} ${test_type} | grep "^${vmName} ${test_context}/${test_type}" | wc -l)" "vm has not been retrieved"
}

### vm_configure

test_vm_configure_sets_hostname() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  vm_ssh ${vmName} true
  sleep 1
  assert_equals "${vmName}" "$(vm_ssh ${vmName} cat /etc/hostname)" "host name has not been set"
}

### vm_instantiate

test_vm_instantiate_creates_and_launches_machine() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  assert "vm_running ${test_context} ${test_type} | grep \"^${vmName} \"" "vm has not been created"
}

### is_vm_running

test_is_vm_running_returns_1_when_vm_is_running() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  assert_equals "1" "$(is_vm_running ${vmName})" "vm is not seen"
}

test_is_vm_running_returns_0_when_vm_is_not_running() {
  assert_equals "0" "$(is_vm_running this_would_surely_be_bad_luck_if_a_vm_was_running_with_that_name)" "non running vm is seen"
}

### vm_ssh

test_vm_ssh_connects_to_vm() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  local vmIp=$(vm_ip ${vmName})
  assert "vm_ssh ${vmIp} echo connected | grep \"connected\"" "did not connect to the vm"
}

### vm_ip

test_vm_ip_returns_correct_ip() {
  local template_name=archlinux
  local vmName=$(vm_instantiate ${template_name} 1 ${test_context} ${test_type} | xargs)
  local vmIp=$(vm_ip ${vmName})
  local actual_vm_name=$(vm_ssh ${vmIp} hostname)
  while [ "${actual_vm_name}" == "${template_name}" ] ; do
    sleep 1
    actual_vm_name=$(vm_ssh ${vmIp} hostname)
  done
  assert_equals "${vmName}" "$(vm_ssh ${vmIp} hostname)" "ip address does not match the vm"
}

### vm_name

test_vm_name_returns_correct_name() {
  local template_name=archlinux
  local vmName=$(vm_instantiate ${template_name} 1 ${test_context} ${test_type} | xargs)
  local vmIp=$(vm_ip ${vmName})
  local maxwait=20
  local vmNameRes=$(vm_name ${vmIp})
  local vmKnownName=$(vm_ssh ${vmIp} hostname)
  while [ "${vmNameRes}" == "${template_name}" -a "${vmNameRes}" != "${vmKnownName}" -a $maxwait -gt 0 ]
  do
    sleep 1
    maxwait=$((maxwait-1))
    echo -n .
    vmNameRes=$(vm_name ${vmIp})
    vmKnownName=$(vm_ssh ${vmIp} hostname)
  done
  assert_equals "$(vm_name ${vmIp})" "$(vm_ssh ${vmIp} hostname)" "name does not match the vm"
}

### vm_context

test_vm_context_returns_context() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  local vmGroup=$(vm_context ${vmName})
  assert_equals "${test_context}" "${vmGroup}"
}

### vm_type

test_vm_type_returns_type() {
  local vmName=$(vm_instantiate archlinux 1 ${test_context} ${test_type} | xargs)
  local vmType=$(vm_type ${vmName})
  assert_equals "${test_type}" "${vmType}"
}

### global

setup() {
  realDir=.
  libDir=../lib
  libName=cm_lib
  [ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
  [ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

  if [ -d ${vmBaseDir}/${test_context} ] ; then
    echo "testing context already exists" >&2
    exit 1
  fi
}

teardown() {
  vms=$(vm_running ${test_context} ${test_type} | sed 's/ .*//' | xargs)
  [ -n "${vms}" ] && for vm in ${vms}
  do
    vm_stop ${vm} ${test_context} ${test_type}
  done
  [ -d ${vmBaseDir}/${test_context} ] && rm -r ${vmBaseDir}/${test_context}
  while (pgrep -f qemu-system-x86_64 -a | grep ${test_context}/${test_type} >/dev/null) ; do sleep 1 ; done
}

wait_for_vm_to_stop() {
  local vm_to_wait_for=$1
  local wait_count=30
  local vm_count=$(vm_running ${test_context} ${test_type} | grep "^${vm_to_wait_for} " | wc -l)
  while [ ${wait_count} -gt 0 -a ${vm_count} -eq 1 ]
  do
    sleep 1
    vm_count=$(vm_running ${test_context} ${test_type} | grep "^${vm_to_wait_for} " | wc -l)
    wait_count=$((wait_count+1))
  done
}

test_context=context_$$_${RANDOM}
test_type=type_$$_${RANDOM}
test_vm=vm_$$_${RANDOM}

# vim: syntax=sh
