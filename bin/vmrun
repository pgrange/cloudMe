#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

stopSignal=SIGUSR1

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -g <GROUP> [ -f <FILE> | -m specline ] [ -G ]
  -g : specify group to run VM in
  -f <FILE> : instanciate servers based on a configuration file. View documentation for file format.
  -m : give a vm specification (as provided to -f option)
  -G : when running VMs have a GUI for each one
  -b : background mode. Just launcheds VM (with -f or -r) and exit.
  -h : display this help
  NOTE : SIGINT (or ^C) will stop all the managed VMs and will then destoy them. ${stopSignal} will stop and quit as well, but will leave the machiness in place for you to relaunch then at will (that's what the -r option is for)." >&2
  exit 1
}

stop_all() {
  vms=$(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1 | xargs)
  log "My vms are currently : "
  for vm in ${vms} ; do
    log " - ${vm}"
  done
  for vm in ${vms} ; do
    log "shutting down ${vm}"
    vm_stop ${vm} ${vmGroup} $(vm_type ${vm})
  done
}

stop_and_keep_all() {
  log "I am being told to shut down."
  stop_all
  log "Good bye !"
  exit
}

stop_and_destroy_all() {
  log "I am being told to shut down and destroy all running VMs."
  stop_all
  log "removing files"
  vm_group_destroy ${vmGroup}
  log "Good bye !"
  exit
}

run_from_spec() {
  local confFile=$1
  local confLine
  for confLine in $(sed '/^ *$/d;s/ *#.*$//' ${confFile}) ; do
    local vmName=$(echo "${confLine}" | cut -d : -f 1)
    local vmCount=$(echo "${confLine}" | cut -d : -f 2)
    local vmSubGroup=$(echo "${confLine}" | cut -d : -f 3)
    local vmOpts=$(echo "${confLine}" | cut -d : -f 4 | tr ";" " ")
    local vmSpawned=$(vm_instantiate ${vmName} ${vmCount} ${vmGroup} ${vmSubGroup} "${vmOpts} ${guiOpt}")
    local vm
    local vms
    for vm in $(echo "${vmSpawned}" | tr -s '\n ' '  ') ; do
      vms="${vms} ${vm}"
    done
  done
  echo "${vms}"
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmName=
guiOpt=
specLines=
backgroundMode=0
while getopts f:g:m:Gbh name
do
  case $name in
    f) groupConfFile="$OPTARG" ;;
    g) vmGroup="$OPTARG" ;;
    m) [ -n "${specLines}" ] && specLines="${specLines}\n$OPTARG" || specLines="$OPTARG" ;;
    G) guiOpt="gui" ;;
    b) backgroundMode=1 ;;
    h) usage ;;
  esac
done
shift $(($OPTIND-1))

[ -z "${vmGroup}" ] && usage "-g is mandatory"

if [ -n "${specLines}" -a -n "${groupConfFile}" ] ; then
  usage "you must choose between specifying a specification file (-f) and inline specifications (-m)"
fi

log "I will be managing the ${vmGroup} group"
[ ${backgroundMode} -eq 1 ] && log "Background mode activated : I will quit when my VMs are up."

trap 'stop_and_destroy_all' SIGINT SIGTERM
trap 'stop_and_keep_all' ${stopSignal}

vms=$(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1 | xargs)
if [ -n "${vms}" ] ; then
  log "${vmGroup} is not empty !"
  for vm in ${vms} ; do
    log "${vm} is of $(vm_type ${vm}) type in $(vm_group ${vm}) group"
  done
fi

if [ -n "${groupConfFile}" ] ; then
  vms=$(run_from_spec ${groupConfFile})
  for vm in ${vms}
  do
    log "${vm} of $(vm_type ${vm}) type has been spawned in $(vm_group ${vm}) group"
  done
fi

if [ -n "${specLines}" ] ; then
  specFile=$(mktemp)
  echo -e "${specLines}" > ${specFile}
  vms=$(run_from_spec ${specFile})
  rm ${specFile}
  for vm in ${vms}
  do
    log "${vm} of $(vm_type ${vm}) type has been spawned in $(vm_group ${vm}) group"
  done
else
  groups=$(ls ${vmBaseDir} | grep -v "${vmCreateGroup}")
  echo ${groups} | tr ' ' '\n' | grep "^${vmGroup}$" >/dev/null || usage "${vmGroup} is no known group"
  subGroups=$(ls ${vmBaseDir}/${vmGroup})
  [ -z "${subGroups}" ] && usage "no subGroup for group ${vmGroup}"
  for subGroup in ${subGroups}
  do
    for vmName in $(ls ${vmBaseDir}/${vmGroup}/${subGroup})
    do
      vm_run ${vmName} ${vmGroup} ${subGroup} none ${guiOpt}
      log "${vmName} of $(vm_type ${vmName}) type has been spawned in $(vm_group ${vmName}) group"
      vms="${vms} ${vmName}"
    done
  done
fi

vmsWithoutIp=${vms}
while [ -n "${vms}" ] ; do
  loopOperations=0
  if [ -n "${vmsWithoutIp}" ] ; then
    for vmWithoutIp in ${vmsWithoutIp} ; do
      ip=$(vm_running "${vmGroup}" "*" | grep ${vmWithoutIp} | cut -d ' ' -f 3 )
      if [ -n "${ip}" ] ; then
        log "${vmWithoutIp} has IP ${ip}"
        vmsWithoutIp=$(echo "${vmsWithoutIp}" | sed "s/ *${vmWithoutIp} */ /" | sed -r 's/^ *(.*) *$/\1/')
        log "${vmWithoutIp} has console port $(vm_console_port ${vmWithoutIp})"
        log "${vmWithoutIp} has spice port $(vm_spice_port ${vmWithoutIp})"
        loopOperations=$((loopOperations+1))
      fi
    done
  else
    if [ ${backgroundMode} -eq 1 ] ; then
      log "All of my machines are running."
      log "I quit."
      exit
    fi
  fi
  for vm in ${vms} ; do
    if [ -z "$(vm_running "${vmGroup}" "*" | grep ${vm})" ] ; then
      log "${vm} has vanished..."
      vms=$(echo "${vms}" | sed "s/ *${vm} */ /;s/^ *//;s/ *$//")
      loopOperations=$((loopOperations+1))
    fi
  done
  for vm in $(vm_running "${vmGroup}" "*" | cut -d ' ' -f 1) ; do
    if [ $(echo "${vms}" | tr -s ' ' '\n' | grep ${vm} | wc -l) -eq 0 ] ; then
      log "${vm} has joined the group from outer space."
      vms="${vms} ${vm}"
      vmsWithoutIp="${vmsWithoutIp} ${vm}"
      loopOperations=$((loopOperations+1))
    fi
  done
  [ ${loopOperations} -eq 0 ] && sleep 1
done

log "All of my machines have gone."
log "I quit."
