#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -s <VM_NAME> [ -c <GROUP> [ -t <TYPE> ] ]
   or : $(basename $0) -r <VM_NAME> -i <SNAPTAG> [ -c <GROUP> [ -t <TYPE> ] ]
   or : $(basename $0) -d <VM_NAME> -i <SNAPTAG> [ -c <GROUP> [ -t <TYPE> ] ]
   or : $(basename $0) -l <VM_NAME> [ -c <GROUP> [ -t <TYPE> ] ]
  Manages VMs snapshots.
  -s : creates a snapshot of VM_NAME
  -r : restores VM_NAME in the state of the snapshot with tag SNAPTAG
  -d : deletes VM_NAME snapshot with tag SNAPTAG
  -l : list snapshots for VM_NAME
  -i : specify snapshot TAG
  -c and -t : optionnaly specify context and type. NC_CONTEXT environment variable is available to set context
              default context name is '${vmDefaultContext}'
  -g : alternative to -c. Kept for compatibility
  -h : display this help
  -v : display version and exit" >&2
  exit 1
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

mode=0
modeName=
vmName=
contextName="${vmDefaultContext}"
[ -n "${NC_CONTEXT}" ] && contextName=${NC_CONTEXT}
typeName="*"
while getopts s:r:d:l:i:g:c:t:hv name
do
  case $name in
    s)
      vmName="$OPTARG"
      modeName="snapshot"
      mode=$((mode+1))
      ;;
    r)
      vmName="$OPTARG"
      modeName="restore"
      mode=$((mode+1))
      ;;
    d)
      vmName="$OPTARG"
      modeName="delete"
      mode=$((mode+1))
      ;;
    l)
      vmName="$OPTARG"
      modeName="list"
      mode=$((mode+1))
      ;;
    i) snapTag="$OPTARG" ;;
    g|c) contextName="$OPTARG" ;;
    t) typeName="$OPTARG" ;;
    h) usage ;;
    v) version ;;
  esac
done
shift $(($OPTIND-1))

[ ${mode} -eq 0 ] && usage "One mode must be specified between -s, -r, -d and -l"
[ ${mode} -gt 1 ] && usage "Only one mode to specify between -s, -r, -d and -l"

[ -z ${vmName} ] && usage "VM name is mandatory"

[ "${contextName}" == "*" ] && contextName=$(vm_context ${vmName})
[ "${typeName}" == "*" ] && typeName=$(vm_type ${vmName})

vmRunning=$(vm_running "${contextName}" "${typeName}" | grep "^${vmName}" | wc -l)

vm_take_snapshot_when_stopped() {
  local vmDisks=$(vm_disks ${vmName} ${contextName} ${typeName} | cut -d ' ' -f 1)
  local vmDir=$(vm_dir ${vmName} ${contextName} ${typeName})
  local snapTag="vd-$(date +%Y%m%d%H%M%S)"
  local vmDisk
  for vmDisk in ${vmDisks}
  do
    qemu-img snapshot -c ${snapTag} ${vmDir}/${vmDisk}
  done
}

vm_take_snapshot_when_started() {
  vm_console_command ${vmName} savevm
}

vm_list_snapshots_when_stopped() {
  local vmMainDisk=$(vm_disks ${vmName} ${contextName} ${typeName} | cut -d ' ' -f 1)
  local vmDir=$(vm_dir ${vmName} ${contextName} ${typeName})
  qemu-img snapshot -l ${vmDir}/${vmMainDisk}
}

vm_list_snapshots_when_started() {
  vm_console_command ${vmName} info snapshots
}

vm_restore_started_snapshot() {
  vm_run ${vmName} ${contextName} ${typeName}
  vm_console_command ${vmName} loadvm ${snapTag} >/dev/null 2>&1
}

vm_restore_stopped_snapshot() {
  local vmDisks=$(vm_disks ${vmName} ${contextName} ${typeName} | cut -d ' ' -f 1)
  local vmDir=$(vm_dir ${vmName} ${contextName} ${typeName})
  local vmDisk
  for vmDisk in ${vmDisks}
  do
    qemu-img snapshot -a ${snapTag} ${vmDir}/${vmDisk}
  done
}

vm_delete_snapshot_when_started() {
  vm_console_command ${vmName} delvm ${snapTag}
}

vm_delete_snapshot_when_stopped() {
  local vmDisks=$(vm_disks ${vmName} ${contextName} ${typeName} | cut -d ' ' -f 1)
  local vmDir=$(vm_dir ${vmName} ${contextName} ${typeName})
  local vmDisk
  for vmDisk in ${vmDisks}
  do
    qemu-img snapshot -d ${snapTag} ${vmDir}/${vmDisk}
  done
}

case ${modeName} in
  "snapshot")
    if [ ${vmRunning} -gt 0 ] ; then
      vm_take_snapshot_when_started
    else
      vm_take_snapshot_when_stopped
    fi
    ;;
  "list")
    if [ ${vmRunning} -gt 0 ] ; then
      vm_list_snapshots_when_started
    else
      vm_list_snapshots_when_stopped
    fi
    ;;
  "restore")
    [ -z ${snapTag} ] && usage "snapshot tag is mandatory"
    snapType=unknown
    echo ${snapTag} | grep "^vm-" >/dev/null && snapType=started
    echo ${snapTag} | grep "^vd-" >/dev/null && snapType=stopped
    [ ${vmRunning} -gt 0 ] && vm_stop ${vmName} ${contextName} ${typeName}
    [ ${snapType} == "started" ] && vm_restore_started_snapshot
    [ ${snapType} == "stopped" ] && vm_restore_stopped_snapshot
    [ ${snapType} == "unknown" ] && error "I don't know how to handle this snapshot"
    ;;
  "delete")
    [ -z ${snapTag} ] && usage "snapshot tag is mandatory"
    if [ ${vmRunning} -gt 0 ] ; then
      vm_delete_snapshot_when_started
    else
      vm_delete_snapshot_when_stopped
    fi
    ;;
esac
