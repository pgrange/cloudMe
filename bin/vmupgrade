#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) <TEMPLATE>
  -h : display this help
  -v : display version and exit" >&2
  exit 1
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmName=$1
[ -z "${vmName}" ] && usage "a template name is expected as parameter"
[ "${vmName}" -eq "-h" ] && usage
[ "${vmName}" -eq "-v" ] && version

# Template start
log "starting ${vmName}"
chmod +w ${vmBaseDir}/${vmCreateGroup}/${vmName}/*img
vm_run ${vmName} ${vmCreateGroup} "" none
log "waiting for ${vmName} to get an IP"
vmIp=$(vm_ip ${vmName})
[ -z "${vmIp}" ] && log "${vmName} did not get an IP in time." && exit
log "${vmName} started with IP ${vmIp}"

# Template distrib search
distributionName=$(ansible -i $(which vminventory) ${vmIp} -m setup | tr -d '"' | grep ' ansible_distribution:' | sed 's/^.*: //;s/, *$//')
log "${vmName} is ${distributionName}"

# Upgrade
upgradeCmd=
case ${distributionName} in
  Archlinux)
    upgradeCmd="pacman -Syu --noconfirm"
    ;;
  Debian)
    upgradeCmd="DEBIAN_FRONTEND=noninteractive apt-get update && apt-get -y dist-upgrade 2>&1"
    ;;
  *)
    log "${distributionName} is not a distribution we know how to upgrade"
    ;;
esac
if [ -n "${upgradeCmd}" ] ; then
  log "Upgrading ${vmName} with : ${upgradeCmd}"
  vm_ssh ${vmIp} "${upgradeCmd}"
  vm_ssh ${vmIp} sync
fi

# Template stop
log "stoping ${vmName}"
vm_stop ${vmName} ${vmCreateGroup}
chmod -w ${vmBaseDir}/${vmCreateGroup}/${vmName}/*img
