#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) [ --list | -h | -L ] [ -g <GROUP_NAME> ] | -v
  this tool is intended to be used as inventory by ansible, ansible-playbook...
  but if you don't pass any option, you will have a list of running VMs
  --list : outputs json inventory, suitable for ansible dynamic inventory
  -g : limit output to specified group
  -L : list existing groups
  -h : display this help
  -v : display version and exit
  ">&2
  exit 1
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

groupName="*"
subGroupName="*"

inventory() {
  echo "{"
  previous_group=
  previous_type=
  children=
  hosts=

  for line in $(vm_running "${groupName}" "${subGroupName}" | sort -k 2 | tr " " "/")
  do

    host=$(echo "$line" | cut -d "/" -f 1)
    group=$(echo "$line" | cut -d "/" -f 2)
    if [ "${group}" == "${vmCreateGroup}" ] ; then
      type=${group}
      ip=$(echo "$line" | cut -d "/" -f 3)
    else
      type=$(echo "$line" | cut -d "/" -f 3)
      ip=$(echo "$line" | cut -d "/" -f 4)
    fi

    if [ "${previous_type}" != "${type}" ] ; then
      if [ -n "${previous_type}" ] ; then
        echo "  \"${previous_group}_${previous_type}\" : {"
        echo "    \"hosts\" : [ ${hosts} ],"
        echo "  },"
        hosts=""
      fi
      previous_type=${type}
    fi

    if [ "${previous_group}" != "${group}" ] ; then
      if [ -n "${previous_group}" ] ; then
        echo "  \"${previous_group}\" : {"
        children=$(echo ${children} | tr ' ' '\n' | sort | uniq | xargs echo)
        echo "    \"children\" : [ ${children} ],"
        echo "    \"vars\": {"
        echo "      \"ansible_ssh_common_args\": \"-o StrictHostKeyChecking=no -o CheckHostIp=False -o UserKnownHostsFile=/dev/null\","
        echo "      \"ansible_user\": \"root\","
        echo "    },"
        echo "  },"
        children=""
      fi
      previous_group=${group}
    fi

    hosts="${hosts} \"${ip}\","
    children="${children} \\\"${group}_${type}\\\","

  done

  if [ -n "${type}" ] ; then
    echo "  \"${group}_${type}\" : {"
    echo "    \"hosts\" : [ ${hosts} ],"
    echo "  },"
  fi

  if [ -n "${group}" ] ; then
    echo "  \"${group}\" : {"
    children=$(echo ${children} | tr ' ' '\n' | sort | uniq | xargs echo)
    echo "    \"children\" : [ ${children} ],"
    echo "    \"vars\": {"
    echo "      \"ansible_ssh_common_args\": \"-o StrictHostKeyChecking=no -o CheckHostIp=False -o UserKnownHostsFile=/dev/null\","
    echo "      \"ansible_user\": \"root\","
    echo "    },"
    echo "  },"
  fi

  echo "}"
}

inventoryMode=0
listMode=0
mode=0

if [ "$1" == "--list" ] ; then
  inventoryMode=1
  mode=$((mode+1))
  shift
fi

while getopts Lhvg: name
do
  case $name in
    L)
      listMode=1
      mode=$((mode+1))
      ;;
    g)
      groupName="$OPTARG"
      ;;
    h) usage ;;
    v) version ;;
  esac
done
shift $(($OPTIND-1))

[ $# -gt 0 ] && usage "unknown option $1"
[ ${mode} -gt 1 ] && usage "you can only specify one mode at a time (-L | --list)"

if [ ${inventoryMode} -eq 1 ] ; then
  inventory
elif [ ${listMode} -eq 1 ] ; then
  vmPath=$(dirname ${vmBaseDir})
  vmDir=$(basename ${vmBaseDir})
  cd ${vmPath}
  tree --noreport -d ${vmDir} -I ${vmCreateGroup}
  cd - >/dev/null 2>&1
else
  vm_running "${groupName}" "${subGroupName}"
fi
