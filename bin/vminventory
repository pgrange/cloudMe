#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) [ --list | -h | -L ] [ -c <CONTEXT> ] | -v
  this tool is intended to be used as inventory by ansible, ansible-playbook...
  but if you don't pass any option, you will have a list of running VMs
  --list : outputs json inventory, suitable for ansible dynamic inventory
  -L : list existing VMs in context (or all contexts if set to all)
  -c : limit output to specified context. Alternative to NC_CONTEXT environment variable. Default = context.
       if set to all, displays all VM of all contexts.
  -g : equivalent to -c (kept for compatibility)
  -h : display this help
  -v : display version and exit
  ">&2
  exit 1
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

context="context"
typeName="*"

inventory() {
  local contextName="$1"
  local typeName="$1"
  local line host context type ip previous_context previous_type children hosts

  echo "{"

  for line in $(vm_running "${contextName}" "${typeName}" | sort -k 2 | tr " " "/")
  do

    host=$(echo "$line" | cut -d "/" -f 1)
    context=$(echo "$line" | cut -d "/" -f 2)
    if [ "${context}" == "${vmCreateGroup}" ] ; then
      type=${context}
      ip=$(echo "$line" | cut -d "/" -f 3)
    else
      type=$(echo "$line" | cut -d "/" -f 3)
      ip=$(echo "$line" | cut -d "/" -f 4)
    fi

    if [ "${previous_type}" != "${type}" ] ; then
      if [ -n "${previous_type}" ] ; then
        echo "  \"${previous_context}_${previous_type}\" : {"
        echo "    \"hosts\" : [ ${hosts} ],"
        echo "  },"
        hosts=""
      fi
      previous_type=${type}
    fi

    if [ "${previous_context}" != "${context}" ] ; then
      if [ -n "${previous_context}" ] ; then
        echo "  \"${previous_context}\" : {"
        children=$(echo ${children} | tr ' ' '\n' | sort | uniq | xargs echo)
        echo "    \"children\" : [ ${children} ],"
        echo "    \"vars\": {"
        echo "      \"ansible_ssh_common_args\": \"-o StrictHostKeyChecking=no -o CheckHostIp=False -o UserKnownHostsFile=/dev/null\","
        echo "      \"ansible_user\": \"root\","
        echo "    },"
        echo "  },"
        children=""
      fi
      previous_context=${context}
    fi

    hosts="${hosts} \"${ip}\","
    children="${children} \\\"${context}_${type}\\\","

  done

  if [ -n "${type}" ] ; then
    echo "  \"${context}_${type}\" : {"
    echo "    \"hosts\" : [ ${hosts} ],"
    echo "  },"
  fi

  if [ -n "${context}" ] ; then
    echo "  \"${context}\" : {"
    children=$(echo ${children} | tr ' ' '\n' | sort | uniq | xargs echo)
    echo "    \"children\" : [ ${children} ],"
    echo "    \"vars\": {"
    echo "      \"ansible_ssh_common_args\": \"-o StrictHostKeyChecking=no -o CheckHostIp=False -o UserKnownHostsFile=/dev/null\","
    echo "      \"ansible_user\": \"root\","
    echo "    },"
    echo "  },"
  fi

  echo "}"
}

inventoryMode=0
listMode=0
mode=0

if [ "$1" == "--list" ] ; then
  inventoryMode=1
  mode=$((mode+1))
  shift
fi

[ -n "${NC_CONTEXT}" ] && context=${NC_CONTEXT}
while getopts Lhvg:c: name
do
  case $name in
    L)
      listMode=1
      mode=$((mode+1))
      ;;
    c)
      context="$OPTARG"
      ;;
    g)
      context="$OPTARG"
      ;;
    h) usage ;;
    v) version ;;
  esac
done
shift $(($OPTIND-1))

[ $# -gt 0 ] && usage "unknown option $1"
[ ${mode} -gt 1 ] && usage "you can only specify one mode at a time (-L | --list)"
[ ${context} == "all" ] && context="*"

if [ ${inventoryMode} -eq 1 ] ; then
  inventory "${context}" "${typeName}"
elif [ ${listMode} -eq 1 ] ; then
  cd ${vmBaseDir}
  [ "${context}" == "*" ] || treeOpt="-I ${vmCreateGroup}"
  [ "${context}" == "*" -o -d "${context}" ] && tree --noreport -d ${context} ${treeOpt}
  cd - >/dev/null 2>&1
else
  vm_running "${context}" "${typeName}"
fi
