#!/usr/bin/env bash

#    (c) 2016-2017, n0vember <n0vember@half-9.net>
#
#    This file is part of nocloud.
#
#    nocloud is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    nocloud is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with nocloud.  If not, see <http://www.gnu.org/licenses/>.

usage() {
  echo "$@" >&2
  echo "usage : $(basename $0) -d TEMPLATE_NAME
   or : $(basename $0) -c TEMPLATE_NAME -i ISO_NAME
   or : $(basename $0) -L
  -d : download a template. TEMPLATE_NAME is one of ${vmTemplates}
  -c : create a template ou t of iso
  -i : specify isoName
  -L : list existing templates
  -h : display this help" >&2
  exit 1
}

realMe=$(readlink -e $0)
realDir=$(dirname ${realMe})
libDir=../lib
libName=cm_lib
[ -d "${realDir}/${libDir}" ]  || usage "${libDir} directory was not found in ${realDir} : Installation problem."
[ -f "${realDir}/${libDir}/${libName}" ] && . ${realDir}/${libDir}/${libName} || usage "${libName} was not found in ${realDir}/${libDir} : Installation problem."

vmTemplate=
downloadMode=0
createMode=0
isoName=
while getopts d:c:i:Lh name
do
  case $name in
    d)
      downloadMode=1
      vmTemplate=$OPTARG
      ;;
    c)
      createMode=1
      vmTemplate=$OPTARG
      ;;
    L)
      cd ${vmBaseDir}/${vmCreateGroup}
      ls
      cd - >/dev/null 2>&1
      exit
      ;;
    i)
      isoName=$OPTARG
      [ -f "${isoDir}/${isoName}" -o -f "${isoName}" ] || usage "can't find ${isoName}"
      ;;
    h)
      usage
      ;;
  esac
done
shift $(($OPTIND-1))

[ ${createMode} -eq 1 -a ${downloadMode} -eq 1 ] && usage "You can't create and download at the same time. You've got to chose."
[ ${createMode} -eq 0 -a ${downloadMode} -eq 0 ] && usage "What do you want ? Create or download ?"
[ ${createMode} -eq 1 -a -z "${isoName}" ] && usage "You must specify an iso to create a template."

vmTemplateDir=${vmBaseDir}/${vmCreateGroup}/${vmTemplate}
if [ -d "${vmTemplateDir}" ] ; then
  echo "you already have a template called ${vmTemplate}"
  exit
fi

if [ ${createMode} -eq 1 ] ; then
  vm_create ${vmTemplate} ${vmCreateGroup} "" ${isoName}
fi

if [ ${downloadMode} -eq 1 ] ; then
  echo ${vmTemplates} | tr " " "\n" | grep "^${vmTemplate}$" >/dev/null || usage "unknown template"
  vmTemplateBaseUrl=$(echo "${vmTemplatesDetails}" | grep "^${vmTemplate};" | cut -d";" -f 2)
  vmTemplateBaseMd5=$(echo "${vmTemplatesDetails}" | grep "^${vmTemplate};" | cut -d";" -f 3)
  vmTemplateBaseNum=$(echo "${vmTemplatesDetails}" | grep "^${vmTemplate};" | cut -d";" -f 4)

  mkdir -p ${vmTemplateDir}/${vmTemplate}.tmp
  cd ${vmTemplateDir}
  log "fetching ${vmTemplate}.conf"
  curl -sO ${vmTemplateBaseUrl}/${vmTemplate}.conf
  log "checking compression"
  curl -sO ${vmTemplateBaseUrl}/compression
  compression_mode=$(cat compression)
  rm compression
  ext=
  decomp="cat"
  case ${compression_mode} in
    xz)
      ext=".xz"
      decomp="xz -d"
      ;;
    gzip)
      ext=".gz"
      decomp="gzip -d"
      ;;
  esac
  log "fetching image $((${vmTemplateBaseNum}+1)) chunks"
  for num in $(seq -f "%03g" 0 ${vmTemplateBaseNum})
  do
    log "  ${vmTemplate}.img.${num}... "
    curl -s -o ${vmTemplate}.tmp/${vmTemplate}.img.${num}${ext} ${vmTemplateBaseUrl}/${vmTemplate}.img/${vmTemplate}.img.${num}${ext}
  done
  . ${vmTemplate}.conf
  log "concatenate chunks in ${vmDisk}"
  cat ${vmTemplate}.tmp/${vmTemplate}.img.* | ${decomp} >> ${vmBaseDir}/${vmDisk}
  rm -r ${vmTemplate}.tmp

  log "checking md5"
  md5=$(cat ${vmBaseDir}/${vmDisk} | md5sum | sed 's/ .*//')
  [ "${md5}" == "${vmTemplateBaseMd5}" ] || usage "checkum does not match (got ${md5})"

  log "starting template"
  vm_run ${vmTemplate} ${vmCreateGroup} "" "none"
  vmIp=$(vm_ip ${vmTemplate} | tr ' ' '\n' | sort -u | tail -1)
  vmSshOpen=$(LANG= echo 2>&1 >/dev/tcp/${vmIp}/22 | grep "Connection refused" | wc -l)
  while [ ${vmSshOpen} -ne 0 ]
  do
    sleep 1
    vmSshOpen=$(LANG= echo 2>&1 >/dev/tcp/${vmIp}/22 | grep "Connection refused" | wc -l)
  done
  log "sending public keys"
  ls ~/.ssh/*.pub >/dev/null 2>&1 || usage "you don't have ssh keys"
  mkdir -p /tmp/nocloud.$$/${vmTemplate}
  cp ${realDir}/../etc/nocloud /tmp/nocloud.$$/${vmTemplate}
  chmod 600 /tmp/nocloud.$$/${vmTemplate}/nocloud
  cat ~/.ssh/*.pub | ssh -o StrictHostKeyChecking=False -l root -i /tmp/nocloud.$$/${vmTemplate}/nocloud ${vmIp} tee -a /root/.ssh/authorized_keys >/dev/null
  rm /tmp/nocloud.$$/${vmTemplate}/nocloud

  log "stopping vm"
  vm_ssh ${vmIp} poweroff >/dev/null 2>&1
fi
